#!/usr/bin/env python3
import subprocess
from argparse import ArgumentParser
from os import environ as env
from tempfile import NamedTemporaryFile, mkstemp
from shutil import move
from html import unescape

def entry_setter(d, entry):
    def fn():
        if entry['key']:
            d[entry['key']] = entry['value']
            entry['key']    = None
            entry['value']  = None
    return fn

def key_setter(entry):
    def fn(k):
        entry['key'] = k
    return fn

def value_setter(entry):
    def fn(v):
        entry['value'] = v
    return fn

def parse_dump(dump):
    info = {}
    entry = {'key': None, 'value': None}
    add_entry = entry_setter(info, entry)
    set_key = key_setter(entry)
    set_value = value_setter(entry)

    for line in dump.split("\n"):
        if line == 'InfoBegin':
            add_entry()
        if line.startswith('InfoKey:'):
            set_key(line.partition(':')[2].strip())
        if line.startswith('InfoValue:'):
            set_value(line.partition(':')[2].strip())
    add_entry()
    return info

def write_dict(fp, d):
    for k, v in sorted(d.items()):
        fp.write(k)
        fp.write(': ')
        fp.write(unescape(v))
        fp.write('\n')
    fp.flush()

def parse_dict(fp):
    for line in fp:
        line = line.strip()
        if not line:
            continue
        key, delim, value = line.partition(':')
        if key:
            yield key, value

def merge(old, new):
    info = new.copy()
    for k in old:
        if k not in new:
            info[k] = ''
    return info

def write_dump(fp, info):
    buff = []
    append = buff.append
    for k, v in info.items():
        append('InfoBegin')
        append('InfoKey: ' + k)
        append('InfoValue: ' + v.strip())

    fp.write("\n".join(buff))
    fp.flush()

def call_editor(path):
    editor = env.get('EDITOR')
    if not editor:
        print("$EDITOR is not set.")
        editor = input("Editor Command: ").strip()
    subprocess.call([editor, tmp.name])

argparser = ArgumentParser()
argparser.add_argument('input')
argparser.add_argument('output', nargs='?')
args = argparser.parse_args()

dump = subprocess.check_output(['pdftk', args.input, 'dump_data'])
dump = dump.decode('utf-8')
info = parse_dump(dump)

tmp = NamedTemporaryFile(mode='w+', encoding='utf-8')

tmp.seek(0)
write_dict(tmp, info)

call_editor(tmp.name)

tmp.seek(0)
info = merge(info, dict(parse_dict(tmp)))

tmp.seek(0)
write_dump(tmp, info)

if args.output is None:
    handle, tmp_output = mkstemp()
    subprocess.call(['pdftk', args.input, 'update_info_utf8', tmp.name, 'output', tmp_output])
    move(tmp_output, args.input)
else:
    subprocess.call(['pdftk', args.input, 'update_info_utf8', tmp.name, 'output', args.output])
